Idea General
El elemento perfecto es un juego en el cual, el jugador debe hacer que una pelota entre en un cubo dimensional para ir avanzando en una serie de niveles donde dbera utilizar su ingenio y los items a su disposicion para resolverlo.
El juego posee una apariencia 3D con una jugabilidad 2D, existe un escenario donde se encuentran la pelota, el objetivo y una serie de obstaculos caracteristicos de cada nivel. Ademas la derecha hay un menu, donde el usuario podra ver los items que dispone para ir resolviendo el nivel, para esto, debera ubicarlos, rotarlos y posicionarlos de una manera conveniente para guiar a la pelota en su camino hacia el cubo.

Instrucciones de Juego:

Objetivo: Que la pelota alcance el cubo dimensional en todos los niveles propuestos.
Resumen Controles:
Click Izquierdo- selecciona un item de usuario y lo mueve por la pantalla, soltandolo al segundo click.
Click Derecho- remueve un item del juego, devolviendolo al menu.
Tecla C: Pasa a la etapa de construccion
Tecla Espacio: Pasa de Construccion a Simulacion/ Pausa o reanuda el juego en la etapa de simulacion
Tecla R: Una vez completado el nivel permite reiniciarlo
Tecla Enter: una vez completado el nivel permite avanzar al siguiente

-Dentro de la etapa de construccion con un item seleccionado-
Teclas A y D: Permiten rotar los siguientes items en la etapa de construccion: Acelerador, Cañon (sin la base), Iman, Pared y Resorte.
Teclas Q y E: Permiten rotar el cañon junto con su base / Permiten ensanchar o achicar las paredes hasta un limite
Tecla W: Permite seleccionar cual de las dos rotaciones del cañon posicionar.

NOTA: Para poder realizar una rapida inspeccion del juego (y de gran ayuda a la hora de armar los niveles) se agrego la funcion LvlHack, la que permite saltear los niveles sin haber cumplido su objetivo, pero sin recibir la satisfaccion de lograrlo. Presionando F2 podra avanzar al siguiente nivel, y presionando F1 podra retroceder al nivel anterior.

Descripcion Detallada:
Al inciar el juego se comenzara en el nivel 1, y al ir logrando cumplir los niveles, apareceran carteles que indicaran que el nivel fue completando, pudiendo avanzar al siguiente presionando la tecla enter.
Todo nivel se divide en dos etapas, la etapa de Construccion y la etapa de Simulacion o de juego en si mismo.

Etapa de Construccion:
	Al iniciar cualquier nivel, el mismo se encontrara en esta etapa.
	En esta etapa el jugador debera colocar los items en la posicion que desee, pero solo tendra control en aquellos que se encuentren en el menu, aquellos que ya esten en el escenario al momento de iniciar el nivel, se consideran items del nivel, por lo cual el usuario no tendra control sobre ellos. Para esto debera hacer click izquierdo en la imagen del objeto que desee en el menu (la cual estara en una escala reducida y rotando), una vez clickeada la imagen se considera que el objeto ha sido seleccionado, cuando un objeto esta seleeccionado, se lo vera de diferentes colores dependiendo su posicion(ver mas adelante).
	Cuando el objeto este seleccionado, el usuario podra moverlo por la pantalla moviendo el mouse y podra rotarlo o, en algunos casos definir parte de su comportamiento durante la simulacion (ver en la seccion items, la construccion de cada uno mas adelante). Una vez posicionado donde el usuario desee, debera hacer click izquierdo para soltarlo.
	
	Colores de un Objeto Seleccionado:
		Verde: El objeto se encuentra en una posicion valida dentro del juego, al soltarlo (clickeando por segunda vez) se quedara fijo en esa posicion hasta que el usuario vuelva a seleccionarlo.
		Azul: El objeto se encuentra en una posicion valida dentro del menu, al soltarlo volvera a formar parte de los items del menu, sin ser parte del juego (tomando una vez mas, su tamaño reducido y su animacion de menu).
		Rojo: El objeto se encuentra en una posicion invalida (esto se da cuando esta colisionando con otros objetos), el hacer click izquierdo no soltara el objeto, el cual seguira seleccionado hasta que el usuario lo suelte en una posicion valida.
	
	Si el usuario deseara sacar un item del escenario que anteriormente hubiera colocado, podria seleccionarlo y arrastrarlo hasta el menu, o simplemente hacer click derecho sobre el item, lo cual automaticamente lo llevaria hasta el menu.
	Una vez que el jugador coloco todos los objetos de manera estrategica para que la pelota llegue a su objetivo, puede dar por terminada la etapa de construccion presionando la tecla espacio, entrando a la etapa de simulacion.

Etapa de Simulacion:
	Al finalizar la etapa de construccion (presionando espacio) se inciara esta etapa.
	En esta etapa el jugador debera observar como la pelota interactua con los objetos que el coloco, y en caso de no ganar, prestar atencion al comportamiento de la misma para poder reubicar los objetos de una mejor manera.
	En cualquier momento de la simulacion el jugador podra volver a la etapa de construccion (reiniciando la posicion de la pelota y delos objetos con los que halla interactuado) y ademas podra pausar y reanudar la simulacion presionando espacio.
	Es importante destacar que el nivel se completa durante esta etapa, ya que es cuando la pelota interactua con los objetos e intenta llegar a su objetivo. En caso de lograrlo, se considera el nivel completado (y se muestra un cartel que lo indica), el usuario puede presionar la tecla enter para pasar al siguiente nivel, o la tecla R (Replay) en caso de que quiera volver a hacer el nivel (con la misma configuracion de objetos con la que lo gano, pudiendo hacerle cambios si lo desea, o simplemente repetir la simulacion ganadora).

Items del Juego:
	Acelerador: este item permite al jugador colocar una pista por la cual la pelota puede circular. Al circular por la pista, esta hara que la pelota gane velocidad en la direccion en dodne las flechas apuntan.
		Construccion: ademas de posicionarse con el mouse, puede direccionarlo con las teclas A y D.

	Agujero Negro: este peligroso item, usado como obstaculo y como recurso del jugador atraera a la pelota en toda direccion (asi como el iman la atrae, pero en toda direccion como el repulsor), pero como su nombre lo indica, si la pelota llegara a tocarlo desapareceria del juego por lo cual el jugador debera presionar C para volver a la etapa de construccion y reiniciar el juego.
		Construccion: este objeto solo se puede posicionar con el mouse.

	Boton: mas que un item en si mismo, este es un auxiliar, al presionarlo desde arriba o abajo, permite cambiar las propiedades de alguno de los items del escenario, el jugador debera descubrir cual de esos items es el que el boton modifica y de que manera. Este podria hacer desaparecer algun obstaculo o incluso cambiar la gravedad.
		Construccion: Se posiciona con el mouse y se rota con las letras A y D.

	Cañon: el poderoso cañon nos permitira disparar a la pelota en la direccion que querramos, siempre y cuando lleguemos a cargarlo. Al iniciar la simulacion el cañon estara inactivo, hasta que el usuario logre que la pelota entre en el orificio del cañon, cargandolo. Una vez que el cañon este cargado rotara, abandonando su rotacion inicial y se colocara el posicion de disparo, una vez finalizado, disparara a la pelota con cierta potencia (puede variar en distintos cañones) hacia esa direccion. En caso de que el cañon sea parte del nivel, las posiciones (inicial y de disparo) seran propias del cañon y el usuario no podra elegirlas, en caso de que el cañon sea un item del usuario este podra tanto posicionarlo donde quiera como tambien establecerle las posiciones que el desee (por esto es el item mas complejo de construir)
		Construccion: ademas de desplazarlo con el mouse, el cañon posee 3 tipos de rotacion, la primera de ellas es la rotacion absoluta, en la cual rota tanto el cañon en si como su base, es decir rota todo el objeto, para lograr esta rotacion el usuario podra presionar las teclas Q y E.
				Las otras dos rotaciones seran las que, dejando quieta la base, definan la posicion del cañon tanto para disparar como incial. El usuario podra definir una posicion presionando las teclas A y D y una vez agusto con la posicion seleccionada presionando la tecla W podra cambiar a la otra rotacion (pudiendo modificarla con A y D tambien) de esta manera con W cambia de una a otra y con A y D la establece como desee. (Nota: se tomara como posicion inicial la posicion que tenga el cañon en el momento de presionar espacio (iniciar la simulacion) y como posicion de disparo la otra)

	Cubo dimensional: Un pequeño cubo (normalmente del tamaño de la pelota) al cual el jugador debera prestar especial atencion, ya que el objetivo es que la pelota lo alcance (basta con que lo colisione solamente)

	Iman: aunque muy util y verstail, a veces dificil de emplear, el iman atraera a la pelota con una fuerza propia (puede variar en distintos imanes) pero solo lo hara si la pelota se encuentra en su campo de atraccion (direccionado por sus partes planas)
		Construccion: para poder direccionar el iman para donde el jugador desee, podra rotarlo como las paredes presionando las teclas A y D.

	Pared: este es uno de los items que mas aparece en el juego, normalmente se utiliza como obstaculo para evitar que el camino de la pelota sea directo, pero en ciertos niveles el usuario podra utilizarlo como uno de sus items para lograr su objetivo.
		Construccion: presionando las teclas A y D se puede cambiar su rotacion hacia izquierda y derecha respectivamente. Ademas el jugador podra agrandar y achicar el largo de la pared con las teclas Q y E, pero hasta un limite especifico para cada pared (que el jugador podra comprobar jugando)

	Pelota: junto con el cubo dimensional, es una de las protagonistas del juego, se la vera en todos los niveles y sera parte de los items del nivel (el usuario no podra moverla en la etapa de cosntruccion), al iniciar la simulacion se vera afectada por la gravedad y comenzara a interactuar con los items que el usuario haya dispuesto en el escenario.
	
	Portal: este misterioso item permite a la pelota teletransportarse a la posicion del receptor. El umbral de entrada se reconocera por su color azul y el umbral de salida por su color naranja, pero cuidado, solo se puede usar una unica vez.
		Construccion: el jugador, enc aso de poseerlo entre sus items solo poseera el umbral azul, el receptor (por donde sale la pelota) sera fijo en el escenario. Podra posicionar el umbral azul con el mouse, pero no rotarlo.

	Repulsor: esta pequeña pelotita roja sera a veces una ayuda y otras una molestia, su efecto sobre la pelota es, como lo indica su nombre repelerla. Similar a como el iman la atrae este objeto repele a la pelota, pero sin importar la direccion en la que la pelota se encuentre.
		Construccion: este objeto solo se puede posicionar con el mouse.
	
	Resorte: con este item, el usuario podra hacer que la pelota rebote hacia cierta direccion sin perder gran parte de su velocidad, cuando la pelota rebote en la cara superior del resorte (que sera la cara de madera), la misma saldra disparada con una velocidad mayor a la que saldria si rebotara en una pared convencional.
		Construccion: al igual que la pared, podra posicionarlo con el mouse y rotarlo con A y con D.

Desiciones de Diseño Tomadas:

Jugabilidad:
	Dado que el juego proponia un ambiente de resolucion de acertijos utilizando diferentes items, se decidio tener una jugabilidad 2D, auqnue el modelo en si es 3D, durante el juego solo se maneja en el eje X,Y para las interacciones normales, haciendo mas facil para el usuario como tambien para su diseño.

El Juego, sus etapas, diseño general:

	A la hora de realizar el juego, definimos dos etapas muy marcadas. La etapa de contruccion, en la que el usuario se encarga de colocar los items y de diseñar lo que le parece es una solucion del nivel propuesto y la etapa de simulacion, la cual es en si, la etapa mas importante de la aplicacion, ya que es donde se hacen todas las consideraciones fisicas y donde mas se sobrecarga el motor por la cantidad de calculos realizados.
	Esta etapa, por su complejidad esta dividida en varias fases:
			Animacion: en esta fase se animan los objetos no interactivos (aquellos no moviles).
			Accion: en esta fase se calculan todos los efectos no conservativos ya que son inndependientes de las restricciones impuestas por los cuerpos.
			Colisiones: esta fase se hace en 2 partes una verifica que las animaciones sean validas (objetos estaticos animados esten en estado valido(ej: el cañon al rotar)) y luego las colisiones con interactivos, quew son aquellas que pueden estar sujetas a restricciones fisicas.
			Reaccion: esta fase es la mas importante es donde todas las colisiones son verificadas una y otra vez hasta llegar a un estado valido o hasta un numero maximo de repeticiones.
			Simulacion: una vez cumplidas todas las restricciones necesarias se simula el movimiento de todos los objetos principalmente los interactivos.
	Por ultimo se revisa si el estado actual de la simulacion logra completar todos los objetivos del nivel, de ser asi se da por completo el nivel.
	
Elaboracion de Niveles:
	A la hora de armar los niveles, en el principio del desarrollo se utilizaba una clase, la cual poseia los valores de los objetos harcodeados y los instanciaba dependiendo el nivel en el que se encontraba. Sin embargo con el objetivo de poder hacerlos con mas facildiad y sin la necesidad de recompilar el juego se decidio pasarlos a un archivo de texto para luego a traves de un parser (Parser.cs), se levantan y se instancian los diferentes niveles. Luego intentando llevar esto un poco mas alla, se decidio que este parser levante los niveles de un archivo .xml, seteando las properties propias de cada objeto instanciado del nivel. Para esto se utilizo refleccion (reflector), una herramienta provista por .net que permite obtener la meta informacion de los tipos necesaria para cargar dinamicamente las clases con los datos obtenidos desde el parser.
	La elaboracion del mismo consta de diferentes bloques, el primero (que contiene a todos los demas), es el bloque Level, que setea propiedades generales del nivel como la musica de fondo, la intensidad y posicion de la luz, el cartel de victoria, etc.
	Luego de la seccion Level, esta la seccion Goals, en la cual se instancian los objetivos puntuales del nivel (todos los niveles creados poseen el mismo objetivo).
	Siguiendo con la instanciacion del nivel se instancian los objetos propios del nivel que no pueden ser controlados por el usuario con sus diferentes propiedades, como el menu, las paredes limite y los obstaculos y recursos fijos, como tambien la pelota.
	Por ultimo se deben instanciar los items del usuario, que son aquellos que apareceran ene l menu y sobre los cuales el usuario tendra control para ir avanzando por los diferentes niveles.

Los Objetivos:
	En realidad el juego consta de un solo objetivo, que la pelotita llegue a tocar el cubo dimensional, sin embargo por como esta diseñado el mismo, podrian agregarse objetivos facilmente, ya que cada nivel posee una lista de objetivos, y estos todos entienden los mismos mensajes, asi pudiendo responder si estan completos con una logica particular. Sin embargo, el unico objetivo que esta realmente implementado es que se de la colision de dos objetos (lso cuales son configurados por el archivo .xml).

Los Items:
	A la hora de diseñar los items, decidimos no hacer diferencia de los items del usuario y los items propios del nivel. Esta diferencia la hace el nivel a la hora de construccion, para saber sobre cuales objetos tiene el usuario y cuales no, y a la hora de restablecer las posiciones de los mismos.
	De esta manera todos los items (incluyendo el menu por ejemplo) heredan de la misma clase item. Esto nos facilito las cosas a la hora tanto de crear nuevos items, ya que todo el comportamiento ya estaba en item y en lo uncio que nos teniamos que preocupar era en el comportamiento particular del mismo para redefinir esa parte y nada mas.
	Ademas los mensajes que se mandan en la simulacion, pudiendo asi crear la misma, son iguales a todos los items y cada uno actua de una manera distinta (considerando sus partes asociadas).
	Existen una serie de items particulares que son distintos a los demas entre ellos estan los carteles de victoria, el gravitor (aplicador de gravedad), pero los mas importantes son el menu y los interactivos.
		
		Menu: es unico en el juego, y se encarga de capturar a los items del usuario y aplicarles una animacion especial para que el usuario vea los items que tiene a su disposicion. Es importante destacar que los items del menu, solo estan en la lista del menu, y no en la lista del juego, cuando el usuario los selecciona se produce el intercambio de listas, y cuando el usuario los devuelve al menu lo mismo.
		Interactivo: El unico item interactivo implementado es la pelota, que es la que se ve afectada por todos los demas, incluso por la gravedad (la cual en realidad es un item separado del resto cuyo unico objetivo es plaicarles una fuerza a los interactivos), pero por como esta diseñado el ejemplo agregar otro item interactivo no presentaria grandes dificultades, solo habria que redefinir las particularidades de ese item (su masa y la mesh entre otras) y se comportaria de manera similar a la pelota actual.

Las Partes:
	Parte de la versatilidad que se busco a la hora de realizar los items, consistia en independizar el concepto del item (su comportamiento en si) del comportamiento de sus partes. Considerando partes del item, sus colliders, y sus meshes. Dado que algunos de los items tienen mas de una mesh y mas de un collider (como el cañon), se decidio tener una lista de las partes, las cuales se suscribian a ciertos eventos (como el cambio de la escala, posicion y rotacion del item) y se iban adaptando a la vez.
	Este desacoplamiento del item con sus partes, nos permitio por ejemplo tener partes de un item estaticas, mientras otras se movian. por ejemplo el cañon permite rotar la parte superior independientemente de la base, o el portal, permite mover el umbral de entrada sin que el usuario tenga control del de salida.
	Ademas de esta manera, podemos controlar en las diferentes etapas de simulacion del juego con que objetos deseo interactuar y con cuales no.
		Colliders: Existen diferentes tipos, algunos siguen al objeto en todas sus transformacion y otros, como el ObbTranslatedUnRotatedCollider, el cual ademas de estar trasladado del centro de origen del objeto no rota siempre con el mismo. Sin embargo quizas el mas complejo es el HollowObbCollider, que es subclase del CompositeCollider (Un collider conformado por varios collider con diferentes caracteristicas), este HollowObbCollider es el utilizado en cañon para hacer que la pelota ingrese en el mismo, para luego ser capturado por otro collider en el centro del cañon. De esta manera se permite cargar el cañon colocando la pelota en su interior para que este luego la dispare.
		Meshes: La mayoria de las meshes siguen al item en todas sus transformaciones, sin embargo algunas no como la base del cañon, que al igual que uno de sus tantos colliders, no rotan con el siempre. Ademas algunos objetos tienen mas de una mesh y separadas, como es el caso del portal que posee una mesh (con una textura azul) la cual es el umbral de entrada y otra mesh (con una textura naranja) el cual es un umbral de salida y esta segunda no sigue a la primera ni en su textura ni en su color, es practicamente independiente de la primera.
		Particles: A la hora de realizar los efectos de particulas (explicados mas adelante), diferentes items poseian diferentes efectos, entonces, como muchos de estos efectos deben acoplarse al item en sus transformaciones o deben ocurrir en situaciones especiales y seguir al item, se decidio que estos Quads, sean parte del item en si.

Las Meshes:
	Todas las meshes utilizadas (incluso las paredes y la pelota) fueron realizadas en 3DMax y exportadas al TgcViewer con el importador provisto por la catedra.

Las Texturas:
	Algunas de las texturas utilizadas fueron sacados de de las que se encuentran en el TgcViewer, sin embargo la gran mayoria, se buscaron en internet, intentando que se mapee correctamente con el objeto que intentabamos lograr. Sin embargo como muchos objetos fueron realizados en el 3DMax, no se necesitaron tantas texturas.
	A la hora de elegir las mismas, se decidio una tematica espacial-futurista dado que muchos de los objetos (agujero negro, portal, repulsor) daban la impresion de un tiempo futuro.

Efectos de Sonido:
	A la hora de ponerle sonido al juego, buscamos distintos sonidos en internet, aunque muchos nos sirvieron (como el disparo del cañon) muchos de ellos fueron creados por nosotros utilizando la herramienta provista por esta pagina:  http://www.superflashbros.net/as3sfxr/
	Esa herramienta te permite obtener diferentes sonidos editando ciertos efectos y frecuencias, logrando sonidos mas acordes al ambiente que habiamos armado para el ejemplo.
	Como musica de fondo optamos por parte de la banda sonora de un juego conocido de playstation "Crash bandicoot 2", en donde la musica con un estilo futurista que encaja con la tematica elegida intentando agregrar un ambiente mas relajado o misterioso para los niveles que presentamos.

Efectos de Particulas:
	Para lograr los efectos de particulas (el humo del cañon, el polvo de las paredes, las chispas del iman y el repulsor y el poder del agujero negro), conseguimos diferentes Atlas Textures (algunos por internet, otros hechos por nosotros con Gimp y Photoshop). Decidimos utilizar esta tecnica ya que al poseer una jugabilidad 2D el efecto visual logrado era el deseado.
	Para lograr el efecto, se necesitaba un Quad, al cual se le cargaba la textura y cambiando el mapeado de la misma (UV offset) a gran velocidad, se produce el efecto visual de la animacion.
	Uno de los problemas que se nos presento es que el TgcQuad solo permite setear un color (no puede ponerse textura) y el TgcPlaneWall solo tiene orientaciones paralelas a los ejes cartesianos (no nos permitia rotar la animacion con nuestros objetos). Para resolver esto, reutilizamos el codigo de ambas clases del TgcViewer y definimos dos clases, TextturedQuad.cs y AnimatedQuad.cs, con estas dos clases logramos tanto el seteo de la textura como el mapeado de la misma durante la animacion. Controlando el tamaño de la textura y la velocidad de la animacion.
	Ademas en aquellos efectos que dependen del rebote de la pelota, el tamaño del efecto tiene una relacion directa con la velocidad de colision de la misma, asi logrando un efecto un poco mas creible.

Animaciones:
	Las diferentes animaciones que se utlizaron, el encogimiento del resorte, el reposicionamiento del cañon, el cambio constante del agujero negro, decidimos aplicar diferentes tipos de transformaciones a los items, asi rotandolos o escalandolos en diferentes momentos y de la manera adecuada, se logro el efecto deseado. Algunas animaciones (como las flechas del acelerador) se utilizo la misma tecnica que se uso en las particulas, logrando un movimiento continuo y constante sin modificar la mesh en si.

Optimizacion:
	En cuanto a la optimizacion del juego, uno de los problemas mas grandes que tuvimos es la carga de los niveles, al levantarlos del disco (desde los archivos .xml) en el momento de inicio del juego, se perdia mucho tiempo en el inicio del juego. Para dar una solucion a este problema, por un lado se decidio poner una pantalla de carga al inicio con una animacion (para que el jugador vea que ya se inicio el juego) y ademas, a la hora de levantar los niveles, estos no se levantan todos al inicio, sino que se levantan dinamicamente uno a uno, mostrandose el primer nivel una vez que ya se cargo. Para esto se utilizo un hilo secundario en la aplicacion que se encarga de verificar si tanto el nivel siguiente como el anterior estan cargados y en caso de nos estarlos comienza su carga, pero sin interferir a la jugabilidad del juego.
	Otro de los puntos en los que se intento optimizar el ejemplo es en la cantidad de calculos realizados durante la simulacion fisica. Como la cantidad de meshes en pantalla no son demasiadas, el motor fisico era una de las pocas cosas que enlentecian el juego. Para evitar el exceso de calculos, se separo la simulacion en diferentes etapas

